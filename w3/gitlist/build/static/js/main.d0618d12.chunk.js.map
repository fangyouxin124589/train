{"version":3,"sources":["component/GithubList.jsx","component/Load.jsx","component/Tab.jsx","App.js","serviceWorker.js","index.js"],"names":["GithubList","props","openNewPage","window","open","htmlUrl","this","listNum","avatar","name","starsCount","forksCount","openIssuesCount","className","onClick","src","alt","style","margin","marginBottom","color","width","icon","faUser","fontWeight","faStar","faShareAlt","faExclamation","React","Component","Load","Tab","switchTab","e","url","target","getAttribute","document","querySelectorAll","forEach","btn","classList","remove","add","setState","tabName","tabUrl","localStorage","setItem","setTimeout","FetchGit","state","tabList","githubData","count","getItem","axios","get","res","data","items","slice","filterOption","getElementById","map","list","index","key","data-filter","id","length","item","owner","avatar_url","stargazersCount","stargazers_count","forks_count","open_issues_count","html_url","textAlign","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0618d12.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/GithubList.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faUser,\r\n  faStar,\r\n  faShareAlt,\r\n  faExclamation,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass GithubList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  openNewPage = () => {\r\n    window.open(this.props.htmlUrl);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      listNum,\r\n      avatar,\r\n      name,\r\n      starsCount,\r\n      forksCount,\r\n      openIssuesCount,\r\n    } = this.props;\r\n\r\n    const itemDetStyle = {\r\n      margin: \"0 auto\",\r\n    };\r\n\r\n    const listUserIcon = {\r\n      color: \"orange\",\r\n      width: \"20px\",\r\n    };\r\n\r\n    const listStarIcon = {\r\n      color: \"yellow\",\r\n      width: \"20px\",\r\n    };\r\n\r\n    const listForkIcon = {\r\n      color: \"skyblue\",\r\n      width: \"20px\",\r\n    };\r\n\r\n    const listIssueIcon = {\r\n      color: \"pink\",\r\n      width: \"20px\",\r\n    };\r\n\r\n    return (\r\n      <div className=\"github-list\" onClick={this.openNewPage}>\r\n        <span className=\"listNumber\">#{listNum}</span>\r\n        <img src={avatar} alt=\"\" className=\"listAvatar\" />\r\n        <p className=\"listName\">{name}</p>\r\n        <div style={itemDetStyle}>\r\n          <div style={{ marginBottom: \"5px\" }}>\r\n            <FontAwesomeIcon style={listUserIcon} icon={faUser} />\r\n            <span style={{ fontWeight: \"bold\"}}> {name}</span>\r\n          </div>\r\n          <div style={{ marginBottom: \"5px\" }}>\r\n            <FontAwesomeIcon style={listStarIcon} icon={faStar} />\r\n            <span>{starsCount} stars</span>\r\n          </div>\r\n          <div style={{ marginBottom: \"5px\" }}>\r\n            <FontAwesomeIcon style={listForkIcon} icon={faShareAlt} />\r\n            <span>{forksCount} forks</span>\r\n          </div>\r\n          <div>\r\n            <FontAwesomeIcon style={listIssueIcon} icon={faExclamation} />\r\n            <span>{openIssuesCount} open issues</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GithubList;\r\n","import React from \"react\";\r\nimport \"../css/Load.css\";\r\n\r\nclass Load extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render () {\r\n      return (\r\n          <div className=\"load\">\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img\"></div>\r\n              <div className=\"load_img2\"></div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Load;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport GithubList from \"./GithubList\";\r\nimport Load from \"./Load\"\r\nimport \"../css/Tab.css\";\r\n\r\nclass Tab extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tabList: [\r\n        {\r\n          name: \"All\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E11&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"java\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E11+language:java&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"javascript\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E11+language:javascript&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"css\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E11+language:css&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"ruby\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E1+language:ruby&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n        {\r\n          name: \"python\",\r\n          url:\r\n            \"https://api.github.com/search/repositories?q=stars:%3E1+language:python&sort=stars&order=desc&type=Repositories\",\r\n        },\r\n      ],\r\n      tabName: \"All\",\r\n      tabUrl: \"https://api.github.com/search/repositories?q=stars:%3E11&sort=stars&order=desc&type=Repositories\",\r\n      githubData: [],\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n  switchTab = (e, { name, url }) => {\r\n    let { target } = e;\r\n    const filterOption = target.getAttribute(\"data-filter\");\r\n    if (filterOption) {\r\n      document\r\n        .querySelectorAll(\".tab-list.active\")\r\n        .forEach((btn) => btn.classList.remove(\"active\"));\r\n      target.classList.add(\"active\");\r\n    }\r\n    this.setState({\r\n      tabName: name,\r\n      tabUrl: url,\r\n    });\r\n    localStorage.setItem(\"name\", name);\r\n    localStorage.setItem(\"url\", url);\r\n    setTimeout(() => {\r\n      this.FetchGit();\r\n    }, 200);\r\n  };\r\n\r\n  //获得数据\r\n  async FetchGit() {\r\n    this.setState({\r\n      githubData: [],\r\n    });\r\n    if (this.state.count === 0) {\r\n      const name = localStorage.getItem(\"name\");\r\n      if (name) {\r\n        const res = await axios.get(localStorage.getItem(\"url\"));\r\n        this.setState({\r\n          githubData: res.data.items.slice(0, 20),\r\n          count: this.state.count + 1,\r\n          name: localStorage.getItem(\"name\"),\r\n          tabUrl: localStorage.getItem(\"url\"),\r\n        });\r\n        const filterOption = document.getElementById(\r\n          localStorage.getItem(\"name\")\r\n        );\r\n        if (filterOption) {\r\n          document\r\n            .querySelectorAll(\".tab-list.active\")\r\n            .forEach((btn) => btn.classList.remove(\"active\"));\r\n          filterOption.classList.add(\"active\");\r\n        }\r\n      } else {\r\n        const res = await axios.get(this.state.tabUrl);\r\n        this.setState({\r\n          githubData: res.data.items.slice(0, 20),\r\n        });\r\n        const filterOption = document.getElementById(\"All\");\r\n        if (filterOption) {\r\n          document\r\n            .querySelectorAll(\".tab-list.active\")\r\n            .forEach((btn) => btn.classList.remove(\"active\"));\r\n          filterOption.classList.add(\"active\");\r\n        }\r\n      }\r\n    } else {\r\n      const res = await axios.get(this.state.tabUrl);\r\n      this.setState({\r\n        githubData: res.data.items.slice(0, 20),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.FetchGit();\r\n  }\r\n\r\n  render() {\r\n    const { githubData } = this.state;\r\n    return (\r\n      <div>\r\n        <span className=\"title\">Github热门项目</span>\r\n        <div className=\"tab\">\r\n          {this.state.tabList.map((list, index) => {\r\n            return (\r\n              <button\r\n                key={index}\r\n                className=\"tab-list\"\r\n                data-filter={list.name}\r\n                id={list.name}\r\n                onClick={(e) => this.switchTab(e, list)}\r\n              >\r\n                {list.name}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"list-content\">\r\n        {githubData.length !== 0 ? (\r\n            githubData.map((item, index) => {\r\n              return (\r\n                <GithubList\r\n                  key={index}\r\n                  listNum={++index}\r\n                  avatar={item.owner.avatar_url}\r\n                  name={item.name}\r\n                  stargazersCount={item.stargazers_count}\r\n                  forksCount={item.forks_count}\r\n                  openIssuesCount={item.open_issues_count}\r\n                  htmlUrl={item.html_url}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <div>\r\n              <h3 style={{ textAlign: \"center\" }}>世界名画~（github热门项目加载中）</h3>\r\n              <Load />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Tab from './component/Tab'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tab />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}